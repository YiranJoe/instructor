{"ast":null,"code":"var _jsxFileName = \"/Users/yiranhu/chatgpt/src/App.js\",\n  _s = $RefreshSig$();\n// Create a react component that inputs a textarea message and then perfome a fetch request to localhost:3001 gets back a respond as a data.message and displays that message in a box below\nimport { Configuration, OpenAIApi } from \"openai\";\nconst OpenAI = require('openai');\n{\n  Configuration, OpenAIApi;\n}\nconst configuration = new Configuration({\n  organization: \"org-nysYocEzsu4uA0e798cMCS1F\",\n  apiKey: process.env.OPENAI_API_KEY\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.listEngines();\nimport React, { useState } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const handleSubmit = event => {\n    event.preventDefault();\n    fetch(\"http://localhost:3001/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message\n      })\n    }).then(res => res.json()).then(data => setResponse(data.message));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jHM+YtvfzbETFFMW8yzFEfsiCIU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Configuration","OpenAIApi","OpenAI","require","configuration","organization","apiKey","process","env","OPENAI_API_KEY","openai","response","listEngines","React","useState","App","message","setMessage","setResponse","handleSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","data","e","target","value"],"sources":["/Users/yiranhu/chatgpt/src/App.js"],"sourcesContent":["// Create a react component that inputs a textarea message and then perfome a fetch request to localhost:3001 gets back a respond as a data.message and displays that message in a box below\nimport { Configuration, OpenAIApi } from \"openai\";\nconst OpenAI = require('openai');\n{ Configuration, OpenAIApi }\nconst configuration = new Configuration({\n    organization: \"org-nysYocEzsu4uA0e798cMCS1F\",\n    apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.listEngines();\nimport React,{useState} from \"react\";\nimport './App.css';\n\nfunction App() {\n  const [message,setMessage] = useState(\"\");\n  const [response,setResponse] = useState(\"\");\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    fetch(\"http://localhost:3001/\",{\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({message})\n    }).then(res => res.json()).then(data => setResponse(data.message));\n  }\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <textarea value={message} onChange={(e) => setMessage(e.target.value)}></textarea>\n        <button type=\"submit\">Send</button>\n      </form>\n      <div>{response}</div>\n    </div>\n  );\n}\n\nexport default App\n\n"],"mappings":";;AAAA;AACA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC;EAAEH,aAAa,EAAEC,SAAS;AAAC;AAC3B,MAAMG,aAAa,GAAG,IAAIJ,aAAa,CAAC;EACpCK,YAAY,EAAE,8BAA8B;EAC5CC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AACxB,CAAC,CAAC;AACF,MAAMC,MAAM,GAAG,IAAIT,SAAS,CAACG,aAAa,CAAC;AAC3C,MAAMO,QAAQ,GAAG,MAAMD,MAAM,CAACE,WAAW,EAAE;AAC3C,OAAOC,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,OAAO,EAACC,UAAU,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;EACzC,MAAM,CAACH,QAAQ,EAACO,WAAW,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAMK,YAAY,GAAIC,KAAK,IAAK;IAC9BA,KAAK,CAACC,cAAc,EAAE;IACtBC,KAAK,CAAC,wBAAwB,EAAC;MAC7BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACX;MAAO,CAAC;IAChC,CAAC,CAAC,CAACY,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CAACF,IAAI,CAACG,IAAI,IAAIb,WAAW,CAACa,IAAI,CAACf,OAAO,CAAC,CAAC;EACpE,CAAC;EACD,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAM,QAAQ,EAAEG,YAAa;MAAA,wBAC3B;QAAU,KAAK,EAAEH,OAAQ;QAAC,QAAQ,EAAGgB,CAAC,IAAKf,UAAU,CAACe,CAAC,CAACC,MAAM,CAACC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QAAY,eAClF;QAAQ,IAAI,EAAC,QAAQ;QAAA,UAAC;MAAI;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAC9B,eACP;MAAA,UAAMvB;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QACjB;AAEV;AAAC,GAtBQI,GAAG;AAAA,KAAHA,GAAG;AAwBZ,eAAeA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}